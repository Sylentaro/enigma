generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(255)
  password String? @db.VarChar(255)
  email    String  @unique @db.VarChar(255)
  stamps    Stamp[]
  boards    Board[]
  tasklists    TaskList[]
  tasks    Task[]
}

model Stamp {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String?
  authorId  Int
  User      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Board {
  id        Int      @id @default(autoincrement())
  viewId    String  @unique @db.VarChar
  title     String   @db.VarChar(255)
  authorId  Int
  User      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  taskLists   TaskList[]
}

model TaskList {
  id        Int      @id @default(autoincrement())
  title     String @db.VarChar
  tasks   Task[]
  boardId  Int
  Board      Board     @relation(fields: [boardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authorId  Int
    User      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Task {
  id        Int      @id @default(autoincrement())
  content   String    @db.VarChar(255)
  status    Boolean
  taskListId   Int
  TaskList      TaskList     @relation(fields: [taskListId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authorId  Int
    User      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

